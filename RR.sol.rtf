{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // SPDX-License-Identifier: GPL-3.0\
\
pragma solidity >=0.7.0 <0.9.0;\
\
/**\
 * @title RR\
 * @dev Play Russian Roulette game\
 */\
 \
contract RR \{\
    \
    address[] private players;\
    address[] private losers;\
    uint256 private odds;\
    uint256 private playersTurn;\
    address private creator;\
 \
    constructor()\
    \{\
        creator = msg.sender;\
    \}\
    \
    function setOdds(uint256 oneInThisMany) public\
    \{\
        require(\
            msg.sender == creator,\
            "Only creator can set odds."\
        );\
        odds = oneInThisMany;\
    \}\
    \
    function addPlayer(address Player) public\
    \{\
        \
        require(\
            isALoser(Player) == true || isAPlayer(Player) == true,\
            "Previous losers or current players cannot enter."\
        );\
        players.push(Player);\
    \}\
    \
    function isALoser(address Player) private view returns (bool)\
    \{\
        for (uint i = 0; i < losers.length; i++)\
            \{\
               if (losers[i] == Player)\
                \{\
                    return true;\
                \}\
            \}\
            return false;\
    \}\
    \
    function isAPlayer(address Player) private view returns (bool)\
    \{\
        for (uint i = 0; i < players.length; i++)\
            \{\
               if (players[i] == Player)\
                \{\
                    return true;\
                \}\
            \}\
            return false;\
    \}\
    \
    function lose (address Player) private\
    \{\
         address[] memory temp = new address[](0);\
         players = temp;\
         losers.push(Player);\
    \}\
    \
    function random() private view returns(uint)\
    \{\
        uint randomNum = uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, players)));\
        return (randomNum % odds);\
    \}\
    \
    function play() public\
    \{\
        uint indexCounter;\
       if (players[num] == 1)\
       \{\
           lose([players[num]);\
       \}\
       else\
       \{\
           playersTurn\
       \}\
    \}\
\}}